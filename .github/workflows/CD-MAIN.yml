name: CD

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-22.04 
    env:
      working-directory: neighbor

    steps: 
    - name: 체크아웃
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: application-prod.yaml 생성
      run: | 
          cd src/main/resources
          echo "${{ secrets.APPLICATION_PROD }}" > ./application-prod.yaml
      working-directory: ${{ env.working-directory }}

    - name: 빌드
      run: |
          chmod +x gradlew
          ./gradlew build -x test
      working-directory: ${{ env.working-directory }}
      shell: bash
######## 여기까지는 CI.yaml와 동일함. CI과정에 나중에 테스트 코드 후 테스트 빌드과정 추가해보자. #########

    - name: docker build 가능하도록 환경 설정
      uses: docker/setup-buildx-action@v2.9.1
      
    - name: docker hub에로그인
      uses: docker/login-action@v2.2.0
      with:
        username: ${{ secrets.DOCKERHUB_LOGIN_USERNAME }}
        password: ${{ secrets.DOCKERHUB_LOGIN_ACCESSTOKEN }}

    - name: docker image 빌드 및 푸시
      run: |
        docker build --platform linux/amd64 -t sss4920/neighbor .
        docker push sss4920/neighbor
      working-directory: ${{ env.working-directory }}

  deploy-cd:      
    needs: deploy-ci
    runs-on: ubuntu-22.04

    steps:    
    - name: 도커 컨테이너 실행
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.RELEASE_SERVER_IP }}
        username: ${{ secrets.RELEASE_SERVER_USER }}
        key: ${{ secrets.RELEASE_SERVER_KEY }}
        script: |
          docker rm -f neighbor
          docker image pull sss4920/neighbor
          docker run -d --name neighbor-8080 -p 8080:8080 sss4920/neighbor
